// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PLACEHOLDER_MEDIVIEW_HUB")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  specialty   String?
  contactInfo String?
  role        UserRole @default(DOCTOR)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdPatients      Patient[]            @relation("CreatedByDoctor")
  appointments         Appointment[]        @relation("DoctorAppointments")
  medicalRecordEntries MedicalRecordEntry[] @relation("AuthoredByDoctor")
}

enum UserRole {
  ADMIN
  DOCTOR
}

model Patient {
  id                 String   @id @default(cuid())
  fullName           String
  dateOfBirth        DateTime
  gender             Gender
  nationalId         String?  @unique
  contactPhone       String?
  contactEmail       String?
  address            String?
  allergies          String?
  currentMedications String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  createdById String?
  createdBy   User?   @relation("CreatedByDoctor", fields: [createdById], references: [id])

  appointments   Appointment[]
  medicalHistory MedicalRecordEntry[]
  labResults     LabResult[]
  dicomStudies   DicomStudy[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Appointment {
  id              String            @id @default(cuid())
  dateTime        DateTime
  durationMinutes Int
  status          AppointmentStatus @default(SCHEDULED)
  reason          String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   User   @relation("DoctorAppointments", fields: [doctorId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  RESCHEDULED
}

model Attachment {
  id        String  @id @default(cuid())
  name      String
  url       String
  type      String?
  size      Int? // in bytes
  createdAt DateTime @default(now())

  medicalRecordEntryId String?
  medicalRecordEntry   MedicalRecordEntry? @relation("MedicalRecordAttachments", fields: [medicalRecordEntryId], references: [id])

  labResultId String?
  labResult   LabResult? @relation("LabResultAttachments", fields: [labResultId], references: [id])
}

model MedicalRecordEntry {
  id                    String   @id @default(cuid())
  visitDate             DateTime
  reasonForConsultation String
  diagnosis             String?
  treatment             String?
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   User   @relation("AuthoredByDoctor", fields: [doctorId], references: [id])

  attachments Attachment[] @relation("MedicalRecordAttachments")
  labResults  LabResult[]  @relation("VisitLabResults")
  dicomStudies DicomStudy[] @relation("VisitDicomStudies")
}

model LabResult {
  id             String   @id @default(cuid())
  testName       String
  date           DateTime
  values         String? // Could be Json for structured results
  units          String?
  referenceRange String?
  interpretation String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  medicalRecordEntryId String?
  medicalRecordEntry   MedicalRecordEntry? @relation("VisitLabResults", fields: [medicalRecordEntryId], references: [id])

  attachments Attachment[] @relation("LabResultAttachments")
}

model DicomStudy {
  id                   String   @id @default(cuid())
  studyDate            DateTime
  description          String?
  storageUrl           String
  previewImageUrl      String?
  seriesCount          Int?
  instanceCount        Int?
  modality             String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  medicalRecordEntryId String?
  medicalRecordEntry   MedicalRecordEntry? @relation("VisitDicomStudies", fields: [medicalRecordEntryId], references: [id])
}
