
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL_PLACEHOLDER_MEDIVIEW_HUB")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String?
  role      UserRole

  specialty String? // For DOCTOR role

  // Relation to Patient profile (if user is a patient)
  // User no longer holds patientProfileId. Patient holds userId.
  patientProfile Patient? @relation("UserPatientProfile")

  // Relations for appointments
  doctorAppointments  Appointment[] @relation("DoctorAppointments") // Appointments where this user is the doctor
  patientAppointments Appointment[] @relation("PatientAppointments") // Appointments where this user is the patient (if patient user linked)

  createdPatients Patient[] @relation("CreatedByDoctor") // Patients created by this doctor (if DOCTOR)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
}

model Patient {
  id           String    @id @default(cuid())
  fullName     String
  dateOfBirth  DateTime
  gender       PatientGender
  nationalId   String?
  contactPhone String?
  contactEmail String?
  address      String?
  allergies    String? // Comma-separated or JSON
  currentMedications String? // Comma-separated or JSON

  // Relation to User account
  user   User?   @relation("UserPatientProfile", fields: [userId], references: [id])
  userId String? @unique // Foreign key to User model

  // Relation to who created this patient (if created by a doctor)
  createdById String?
  createdBy   User?   @relation("CreatedByDoctor", fields: [createdById], references: [id])

  medicalHistory MedicalRecordEntry[]
  labResults     LabResult[]
  dicomStudies   DicomStudy[]
  appointments   Appointment[]        @relation("PatientSpecificAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdById])
}

enum PatientGender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Appointment {
  id              String            @id @default(cuid())
  dateTime        DateTime
  durationMinutes Int
  status          AppointmentStatus @default(SCHEDULED)
  reason          String?
  notes           String? // Notes by doctor or patient regarding the appointment

  // Relation to Patient (the one who the appointment is for)
  patientId String
  patient   Patient @relation("PatientSpecificAppointments", fields: [patientId], references: [id])

  // Relation to Doctor
  doctorId String
  doctor   User   @relation("DoctorAppointments", fields: [doctorId], references: [id])

  // Relation to User (if the patient is also a User, for their view of appointments)
  // This links the appointment back to a User entity if the patient associated with this appointment is a registered user.
  patientUserId String?
  patientUser   User?   @relation("PatientAppointments", fields: [patientUserId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
  @@index([patientUserId])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  RESCHEDULED
}

model MedicalRecordEntry {
  id                   String    @id @default(cuid())
  visitDate            DateTime
  reasonForConsultation String
  diagnosis            String?
  treatment            String?
  notes                String?
  attachments          Json? // For storing array of {name: string, url: string, type?: string, size?: number}

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String // ID of the doctor who made the entry
  // Assuming a doctor is a User with DOCTOR role. We need a relation to User model.
  // doctor User @relation("DoctorMedicalEntries", fields: [doctorId], references: [id]) // Need to add this relation to User model if desired

  labResults   LabResult[]  @relation("MedicalEntryLabResults")
  dicomStudies DicomStudy[] @relation("MedicalEntryDicomStudies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
}

model LabResult {
  id            String    @id @default(cuid())
  testName      String
  date          DateTime
  values        String?
  units         String?
  referenceRange String?
  interpretation String?
  attachments   Json? // For storing array of {name: string, url: string, type?: string, size?: number}

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  medicalRecordEntryId String?
  medicalRecordEntry   MedicalRecordEntry? @relation("MedicalEntryLabResults", fields: [medicalRecordEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([medicalRecordEntryId])
}

model DicomStudy {
  id                 String    @id @default(cuid())
  studyDate          DateTime
  description        String?
  storageUrl         String // URL/path to the raw DICOM file(s) in Cloud Storage
  previewImageUrl    String? // URL to a web-friendly preview image (e.g., JPEG/PNG)
  seriesCount        Int?
  instanceCount      Int?
  modality           String?

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  medicalRecordEntryId String?
  medicalRecordEntry   MedicalRecordEntry? @relation("MedicalEntryDicomStudies", fields: [medicalRecordEntryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([medicalRecordEntryId])
}

// Optional: Audit Log model for tracking important actions
model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  action    String // e.g., "USER_LOGIN", "PATIENT_CREATED", "APPOINTMENT_SCHEDULED"
  userId    String? // ID of the user who performed the action
  // user User? @relation("UserAuditLogs", fields: [userId], references: [id]) // If linking back to User
  details   Json? // Additional details about the action
  ipAddress String?

  @@index([userId])
  @@index([action])
}
